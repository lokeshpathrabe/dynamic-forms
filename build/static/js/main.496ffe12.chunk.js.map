{"version":3,"sources":["lib/utils.js","form.config.js","components/Checkbox.js","components/EmailField.js","components/PasswordField.js","components/RadioField.js","components/SelectField.js","components/TextField.js","lib/hooks.js","lib/FieldRenderer.js","Form.js","App.js","index.js"],"names":["executeCondition","cfg","values","bool","op","conditions","reduce","acc","cond","name","value","fields","checkbox","props","config","useDynamicField","enabled","handleChange","useFormikContext","row","sm","label","id","type","onChange","checked","disabled","email","for","placeholder","password","radio","console","log","tag","Array","isArray","radioOptions","map","check","e","select","options","option","text","required","initialValue","deriveFrom","enableIf","formikValues","setFieldValue","enable","Boolean","result","getEnableIf","deriveConfig","regex","match","exec","length","fieldName","i","arr","splice","deriveValue","useEffect","FieldRenderer","rootConfig","Component","DynamicForm","initialValues","val","c","useState","JSON","stringify","setConfig","jsonConfig","setJSONConfig","message","setMessage","parse","msg","className","onSubmit","formikProps","handleSubmit","target","App","Form","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.496ffe12.chunk.js","sourcesContent":["import { useFormikContext } from \"formik\";\nimport { useEffect } from \"react\";\n\nexport const executeCondition = (cfg, values) => {\n  let bool;\n  switch (cfg.op) {\n    case \"AND\":\n      bool = cfg.conditions.reduce((acc, cond) => {\n        if (cond.op) {\n          return executeCondition(acc, cond);\n        }\n        return acc && values[cond.name] === cond.value;\n      }, true);\n      break;\n    case \"NOT\":\n      const result = cfg.conditions.reduce((acc, cond) => {\n        if (cond.op) {\n          return executeCondition(acc, cond);\n        }\n        return acc || values[cond.name] === cond.value;\n      }, false);\n      bool = !result;\n      break;\n    case \"OR\":\n      bool = cfg.conditions.reduce((acc, cond) => {\n        if (cond.op) {\n          return executeCondition(acc, cond);\n        }\n        return acc || values[cond.name] === cond.value;\n      }, false);\n      break;\n\n    case \"GREATER\":\n      bool = values[cond.name] > cond.value;\n      break;\n    case \"LESS\":\n      bool = values[cond.name] < cond.value;\n      break;\n    case \"LEQ\":\n      bool = values[cond.name] <= cond.value;\n      break;\n    case \"GEQ\":\n      bool = values[cond.name] >= cond.value;\n      break;\n    default:\n      bool = values[cond.name] === cond.value;\n      break;\n  }\n  return bool;\n};\n\nexport const getEnableIf = (config, values) => {\n  if (typeof config === \"boolean\") {\n    return config;\n  }\n  if (Array.isArray(config)) {\n    return [...config].reduce((enable, cfg) => {\n      if (!Boolean(cfg.op)) {\n        cfg = {\n          op: \"OR\",\n          conditions: [cfg],\n        };\n      }\n      const result = executeCondition(cfg, values);\n      return enable || result;\n    }, false);\n  }\n  return true;\n};\n\nexport const deriveValue = (config, formikValues) => {\n  const deriveConfig = config.deriveFrom;\n  const regex = /^!(.*)/gm;\n\n  if (typeof deriveConfig === \"string\") {\n    const match = regex.exec(deriveConfig);\n    if (match && match.length > 0) {\n      const fieldName = match[1];\n      return !formikValues[fieldName];\n    }\n    return formikValues[deriveConfig];\n  }\n\n  if (Array.isArray(deriveConfig)) {\n    return [...deriveConfig].reduce((value, cfg, i, arr) => {\n      if (typeof cfg === \"string\") {\n        arr.splice(i); // exit loop\n\n        const match = regex.exec(deriveConfig);\n        if (match && match.length > 0) {\n          const fieldName = match[1];\n          return value === true\n            ? !formikValues[fieldName]\n            : formikValues[config.id];\n        }\n        return value === true ? formikValues[cfg] : formikValues[config.id];\n      }\n      if (!Boolean(cfg.op)) {\n        cfg = {\n          op: \"OR\",\n          conditions: [cfg],\n        };\n      }\n      const result = executeCondition(cfg, formikValues);\n      return value || result;\n    }, false);\n  }\n};\n","import CheckBoxField from \"./components/Checkbox\";\nimport EmailField from \"./components/EmailField\";\nimport PasswordField from \"./components/PasswordField\";\nimport RadioField from \"./components/RadioField\";\nimport SelectField from \"./components/SelectField\";\nimport TextField from \"./components/TextField\";\n\nconst fields = {\n  checkbox: CheckBoxField,\n  email: EmailField,\n  password: PasswordField,\n  radio: RadioField,\n  select: SelectField,\n  text: TextField,\n};\n\nconst config = [\n  {\n    id: \"indian-citizen\",\n    type: \"checkbox\",\n    label: \"Indian Citizen\",\n    required: false,\n    initialValue: true,\n    deriveFrom: \"!usa-citizen\",\n    enableIf: \"\",\n  },\n  {\n    id: \"usa-citizen\",\n    type: \"checkbox\",\n    label: \"USA Citizen\",\n    required: false,\n    initialValue: false,\n    deriveFrom: \"!indian-citizen\",\n    enableIf: \"\",\n  },\n  {\n    id: \"email\",\n    type: \"email\",\n    label: \"Email\",\n    required: false,\n    initialValue: \"\",\n    deriveFrom: \"\",\n    enableIf: [\n      { name: \"indian-citizen\", value: true },\n      { name: \"usa-citizen\", value: true },\n    ],\n  },\n  {\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    required: false,\n    initialValue: \"\",\n    deriveFrom: \"\",\n    enableIf: [\n      { name: \"indian-citizen\", value: true },\n      { name: \"usa-citizen\", value: true },\n    ],\n  },\n  {\n    id: \"confirm-password\",\n    type: \"text\",\n    label: \"Confirm Password\",\n    required: false,\n    initialValue: \"\",\n    deriveFrom: \"password\",\n    enableIf: false,\n  },\n  {\n    id: \"indian-state\",\n    type: \"select\",\n    label: \"Indian State\",\n    required: false,\n    initialValue: \"kerala\",\n    options: [\"gujarat\", \"maharastra\", \"kerala\", \"utar pradesh\", \"tamilnadu\"],\n    deriveFrom: \"\",\n    enableIf: [{ name: \"indian-citizen\", value: true }],\n  },\n  {\n    id: \"uda-state\",\n    type: \"select\",\n    label: \"USA State\",\n    required: false,\n    initialValue: \"ohio\",\n    options: [\"texas\", \"ohio\", \"florida\", \"california\", \"new jursey\"],\n    deriveFrom: \"\",\n    enableIf: [{ name: \"usa-citizen\", value: true }],\n  },\n];\n\nexport { fields, config };\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\n\nconst CheckBoxField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  return (\n    <FormGroup row>\n      <Label sm={4}>{config.label}</Label>\n      <Col sm={6}>\n        <Input\n          name={config.id}\n          type=\"checkbox\"\n          onChange={handleChange}\n          checked={value}\n          disabled={!enabled}\n        />\n      </Col>\n    </FormGroup>\n  );\n};\n\nexport default CheckBoxField;\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\nimport { config } from \"react-transition-group\";\n\nconst EmailField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  return (\n    <FormGroup row>\n      <Label sm={4} for=\"exampleEmail\">\n        {config.label}\n      </Label>\n      <Col sm={6}>\n        <Input\n          id={config.id}\n          name={config.id}\n          placeholder=\"Enter an email\"\n          type=\"email\"\n          disabled={!enabled}\n          value={value}\n          onChange={handleChange}\n        />\n      </Col>\n    </FormGroup>\n  );\n};\n\nexport default EmailField;\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\n\nconst PasswordField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  return (\n    <FormGroup row>\n      <Label sm={4} for={config.id}>\n        {config.label}\n      </Label>\n      <Col sm={6}>\n        <Input\n          id={config.id}\n          name={config.id}\n          placeholder=\"Enter password\"\n          type=\"password\"\n          disabled={!enabled}\n          value={value}\n          onChange={handleChange}\n        />\n      </Col>\n    </FormGroup>\n  );\n};\n\nexport default PasswordField;\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\n\nconst RadioField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  console.log(value);\n  return (\n    <FormGroup tag=\"fieldset\" row>\n      <Label sm={4} for={config.id}>\n        {config.label}\n      </Label>\n      <Col>\n        {Array.isArray(config.radioOptions)\n          ? config.radioOptions.map((label) => (\n              <FormGroup check>\n                <Input\n                  name={config.id}\n                  type=\"radio\"\n                  onChange={(e) => handleChange()}\n                  //   checked={value}\n                />\n                <Label check>{label}</Label>\n              </FormGroup>\n            ))\n          : null}\n      </Col>\n    </FormGroup>\n  );\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\n\nconst SelectField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  return (\n    <FormGroup row>\n      <Label for={config.id}>Select</Label>\n      <Input\n        id={config.id}\n        name={config.id}\n        type=\"select\"\n        disabled={!enabled}\n        value={value}\n      >\n        {config.options.map((option) => (\n          <option>{option}</option>\n        ))}\n      </Input>\n    </FormGroup>\n  );\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport { Input, FormGroup, Label, Col } from \"reactstrap\";\nimport { useDynamicField } from \"../lib\";\nimport { useFormikContext } from \"formik\";\nimport { config } from \"react-transition-group\";\n\nconst TextField = (props) => {\n  const { config } = props;\n  const { enabled, value } = useDynamicField(props);\n  const { handleChange } = useFormikContext();\n  return (\n    <FormGroup row>\n      <Label sm={4} for=\"exampleEmail\">\n        {config.label}\n      </Label>\n      <Col sm={6}>\n        <Input\n          id={config.id}\n          name={config.id}\n          placeholder=\"Enter some text\"\n          type=\"text\"\n          disabled={!enabled}\n          value={value}\n          onChange={handleChange}\n        />\n      </Col>\n    </FormGroup>\n  );\n};\n\nexport default TextField;\n","import { useEffect } from \"react\";\nimport { useFormikContext } from \"formik\";\nimport { getEnableIf, deriveValue } from \"./utils\";\nimport { fields, config } from \"./../form.config\";\n\nexport const useDynamicField = (props) => {\n  const { config } = props;\n  const { values: formikValues, setFieldValue } = useFormikContext();\n  const enabled = getEnableIf(config.enableIf, formikValues);\n  const value = Boolean(config.deriveFrom)\n    ? deriveValue(config, formikValues)\n    : formikValues[config.id];\n\n  useEffect(() => {\n    setFieldValue(config.id, value);\n  }, [value]);\n\n  return {\n    enabled,\n    value,\n  };\n};\n\nexport const useDynamicForm = () => {\n  const initialValues = config.reduce((val, c) => {\n    val[c.id] = c.initialValue;\n    return val;\n  }, {});\n\n  return {\n    initialValues,\n  };\n};\n","import React from \"react\";\nimport { fields, config as rootConfig } from \"./../form.config\";\n\nconst FieldRenderer = ({ config, ...props }) => {\n  return (\n    <>\n      {(config || rootConfig).map((cfg) => {\n        const Component = fields[cfg.type];\n        return <Component key={cfg.id} config={cfg} {...props} />;\n      })}\n    </>\n  );\n};\n\nexport default FieldRenderer;\n","import React, { useEffect, useState } from \"react\";\nimport { Col, FormGroup, Button, Form, Input } from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport { FieldRenderer, useDynamicForm } from \"./lib\";\nimport { config as rootConfig } from \"./form.config\";\n\nconst DynamicForm = () => {\n  const { initialValues } = useDynamicForm();\n  const [config, setConfig] = useState(JSON.stringify(rootConfig, null, 4));\n  const [jsonConfig, setJSONConfig] = useState(rootConfig);\n  const [message, setMessage] = useState({});\n\n  useEffect(() => {\n    try {\n      setJSONConfig(JSON.parse(config));\n      setMessage({ msg: \"Config Updated\", type: \"success\" });\n    } catch (e) {\n      setMessage({ msg: \"Error in JSON\", type: \"error\" });\n    }\n  }, [config]);\n\n  console.log(config);\n  return (\n    <div className=\"form-container\">\n      <Col sm={5}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={(values) => {\n            console.log(JSON.stringify(values, null, 2));\n          }}\n        >\n          {(formikProps) => (\n            <Form onSubmit={formikProps.handleSubmit}>\n              <FieldRenderer config={jsonConfig} />\n              <FormGroup check row>\n                <Col>\n                  <Button type=\"submit\">Submit</Button>\n                </Col>\n              </FormGroup>\n            </Form>\n          )}\n        </Formik>\n      </Col>\n\n      <Col sm={5}>\n        {message.msg ? (\n          <div\n            className={message.type === \"error\" ? \"error-msg\" : \"success-msg\"}\n          >\n            {message.msg}\n          </div>\n        ) : null}\n\n        <Input\n          id=\"config\"\n          name=\"config\"\n          className=\"config-preview\"\n          type=\"textarea\"\n          value={config}\n          onChange={(e) => setConfig(e.target.value)}\n        />\n      </Col>\n    </div>\n  );\n};\n\nexport default DynamicForm;\n","import \"./styles.css\";\nimport Form from \"./Form\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}